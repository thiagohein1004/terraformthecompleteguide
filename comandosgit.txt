Claro! Aqui vai uma lista dos comandos **mais usados do Git**, com uma breve explicaÃ§Ã£o para cada um:

---

### ðŸ”§ **ConfiguraÃ§Ã£o inicial**
```bash
git config --global user.name "Seu Nome"
git config --global user.email "seu@email.com"
```

---

### ðŸ“¥ **Clonar repositÃ³rio**
```bash
git clone https://github.com/usuario/repositorio.git
```

---

### ðŸ“„ **Status e logs**
```bash
git status             # Verifica mudanÃ§as no diretÃ³rio
git log                # HistÃ³rico de commits
git log --oneline      # Log simplificado
```

---

### ðŸ“‚ **Adicionar e confirmar alteraÃ§Ãµes**
```bash
git add .              # Adiciona todas as mudanÃ§as
git add nome-do-arquivo.txt

git commit -m "Mensagem do commit"
```

---

### ðŸ”„ **Enviar e puxar do repositÃ³rio remoto**
```bash
git push origin main   # Envia mudanÃ§as para o repositÃ³rio remoto
git pull origin main   # Baixa e incorpora mudanÃ§as do remoto
```

---

### ðŸŒ± **Branches**
```bash
git branch                     # Lista branches
git branch nova-branch         # Cria nova branch
git checkout nova-branch       # Muda para nova branch
git checkout -b nova-branch    # Cria e muda de branch

git merge nome-da-branch       # Mescla branch atual com outra
```

---

### â™»ï¸ **Desfazer alteraÃ§Ãµes**
```bash
git restore nome-do-arquivo         # Desfaz alteraÃ§Ãµes locais no arquivo
git reset --hard HEAD               # Reseta tudo para o Ãºltimo commit
git reset --soft HEAD~1             # Remove Ãºltimo commit, mantendo arquivos
```

---

### ðŸ” **Ver diferenÃ§as**
```bash
git diff                     # Mostra o que foi alterado
git diff --staged            # Mostra alteraÃ§Ãµes jÃ¡ adicionadas com `git add`
```

---

### ðŸ”§ **Outros Ãºteis**
```bash
git remote -v                # Ver repositÃ³rios remotos
git stash                    # Salva alteraÃ§Ãµes temporariamente
git stash pop                # Restaura alteraÃ§Ãµes salvas com stash
```

---

Se quiser, posso te mandar esses comandos em PDF, Markdown ou atÃ© em formato de cheat sheet. Quer?
